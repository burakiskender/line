{"version":3,"sources":["webpack:///webpack/bootstrap e930aaa3f7e8ba55c70c","webpack:///external \"event-emitter-extra/dist/commonjs.modern\"","webpack:///external \"lodash/forEach\"","webpack:///external \"debug\"","webpack:///./src/lib/message.js","webpack:///./src/lib/utils.js","webpack:///external \"lodash/assign\"","webpack:///external \"lodash/isObject\"","webpack:///./src/server/connection.js","webpack:///./src/server/rooms.js","webpack:///external \"uws\"","webpack:///./src/lib/deferred.js","webpack:///./src/server/room.js","webpack:///external \"lodash/clone\"","webpack:///external \"lodash/debounce\"","webpack:///external \"lodash/filter\"","webpack:///external \"lodash/isFunction\"","webpack:///external \"lodash/isUndefined\"","webpack:///external \"lodash/map\"","webpack:///external \"lodash/values\"","webpack:///external \"node-uuid\"","webpack:///./src/server/server.js"],"names":["isUndefined","require","isObject","isFunction","values","generateDummyId","EventEmitterExtra","Message","raw","data","JSON","parse","name","n","payload","p","err","e","id","i","Error","isResponded_","console","warn","then","emit","catch","stringify","events","eventNames","forEach","removeAllListeners","event","Names","RESPONSE","HANDSHAKE","PING","ReservedNames","module","exports","assign","promiseDelay","ms","Promise","setTimeout","resolve","retry","task","options","defaults","maxDelay","maxCount","initialDelay","increaseFactor","timeout","counter","delay","once","clearTimeout","length","Math","random","pow","toString","slice","Utils","debounce","Deferred","uuid","debug","ServerConnection","socket","server","v4","deferreds_","state","States","OPEN","handshakeResolved_","on","onMessage_","bind","onError_","onClose_","autoPing_","pingInterval","ping","flags","message","Events","MESSAGE","indexOf","onHandshake_","onPing_","onResponse_","send_","createResponse","dispose","responsePayload","handshakePayload","maxReconnectDelay","initialReconnectDelay","reconnectIncrementFactor","rooms","root","add","HANDSHAKE_OK","log","handshakeResponse","deferred","reject","ERROR","code","CLOSE","removeFromAll","remove","newId","getConnectionById","roomName","getRoomsOf","eventName","setId","onExpire","send","close","filter","map","Room","Rooms","connection","getConnectionsCount","room","handler","resolve_","reject_","timeout_","onExpire_","isFinished_","promise","expire","clearTimeout_","args","apply","clone","ServerRoom","connections","connectionId","Object","keys","index","WebSocketServer","Server","Connection","port","bindEvents","onConnection","onHeaders","onError","CONNECTION","headers","HEADERS","getConnections","broadcast","getRoom"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e930aaa3f7e8ba55c70c","module.exports = require(\"event-emitter-extra/dist/commonjs.modern\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"event-emitter-extra/dist/commonjs.modern\"\n// module id = 0\n// module chunks = 0","module.exports = require(\"lodash/forEach\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/forEach\"\n// module id = 1\n// module chunks = 0","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 2\n// module chunks = 0","const isUndefined = require('lodash/isUndefined');\nconst isObject = require('lodash/isObject');\nconst isFunction = require('lodash/isFunction');\nconst values = require('lodash/values');\nconst {generateDummyId} = require('./utils');\nconst EventEmitterExtra = require('event-emitter-extra/dist/commonjs.modern');\n\n\n/**\n * Message class.\n *\n * @private\n * @class Message\n * @extends {EventEmitterExtra}\n * @property {string} name Event name\n * @property {?any} payload Message payload.\n */\nclass Message extends EventEmitterExtra {\n    static parse(raw) {\n        try {\n            const data = JSON.parse(raw);\n            return new Message({\n                name: data.n,\n                payload: data.p,\n                err: data.e,\n                id: data.i\n            });\n        } catch(err) {\n            throw new Error(`Could not parse message.`);\n        }\n    }\n\n    constructor({name, payload, id, err}) {\n        super();\n\n        this.name = name;\n        this.payload = payload;\n        this.id = id;\n        this.err = err;\n\n        this.isResponded_ = false;\n    }\n\n    setId(id = generateDummyId()) {\n        this.id = id;\n        return id;\n    }\n\n    createResponse(err, payload) {\n        return new Message({name: '_r', payload, err, id: this.id});\n    }\n\n\n    /**\n     * Resolves the message with sending a response back. If event source\n     * does not expecting a response, you don't need to call these methods.\n     * @param {any=} payload\n     */\n    resolve(payload) {\n        if (isUndefined(this.id))\n            return console.warn('[line] A message without an id cannot be resolved.');\n\n        if (this.isResponded_)\n            return console.warn('[line] This message has already been ended.');\n\n        // If thenable\n        if (isObject(payload) && isFunction(payload.then)) {\n            payload\n                .then(response => {\n                    this.isResponded_ = true;\n                    this.emit('resolved', payload);\n                })\n                .catch(err => {\n                    this.isResponded_ = true;\n                    this.emit('rejected', err);\n                });\n\n            return;\n        }\n\n        this.isResponded_ = true;\n        this.emit('resolved', payload);\n    }\n\n\n    /**\n     * Rejects the message, with sending error response back to event source.\n     * @param {any=} err\n     */\n    reject(err) {\n        if (isUndefined(this.id))\n            return console.warn('[line] A message without an id cannot be rejected.');\n\n        if (this.isResponded_)\n            return console.warn('[line] This message has already been ended.');\n\n        this.isResponded_ = true;\n        this.emit('rejected', err);\n    }\n\n    toString() {\n        try {\n            const data = {n: this.name};\n\n            if (!isUndefined(this.payload))\n                data.p = this.payload;\n\n            if (!isUndefined(this.id))\n                data.i = this.id;\n\n            if (!isUndefined(this.err))\n                data.e = this.err;\n\n            return JSON.stringify(data);\n        } catch(err) {\n            throw new Error(`Could not stringify message.`);\n        }\n    }\n\n    dispose() {\n        const events = this.eventNames();\n        events.forEach(event => this.removeAllListeners(event));\n    }\n}\n\n\nMessage.Names = {\n    RESPONSE: '_r',\n    HANDSHAKE: '_h',\n    PING: '_p'\n};\n\n\nMessage.ReservedNames = values(Message.Names);\n\n\nmodule.exports = Message;\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/message.js","const assign = require('lodash/assign');\n\n\nfunction promiseDelay(ms) {\n    return new Promise(resolve => setTimeout(_ => resolve(), ms))\n}\n\n\nfunction retry(task, options = {}) {\n    const defaults = {maxDelay: 160, maxCount: 0, initialDelay: 3, increaseFactor: 2};\n    options = assign(defaults, options);\n    let timeout;\n    let counter = 1;\n    let delay = options.initialDelay;\n\n    const once = function() {\n        return task()\n            .catch(err => {\n                counter++;\n                delay = delay * options.increaseFactor;\n\n                if (options.maxCount != 0 && counter > options.maxCount) {\n                    timeout && clearTimeout(timeout);\n                    throw err;\n                }\n                return promiseDelay(delay * 1000 / 2).then(_ => once());\n            });\n    }\n\n    return once();\n}\n\n\n// http://stackoverflow.com/a/6248722\nfunction generateDummyId(length = 4) {\n    return (\"0000\" + (Math.random()*Math.pow(36,length) << 0).toString(36)).slice(-length);\n}\n\n\nmodule.exports = {promiseDelay, retry, generateDummyId};\n\n\n// WEBPACK FOOTER //\n// ./src/lib/utils.js","module.exports = require(\"lodash/assign\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/assign\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"lodash/isObject\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/isObject\"\n// module id = 6\n// module chunks = 0","const Utils = require('../lib/utils');\nconst Message = require('../lib/message');\nconst EventEmitterExtra = require('event-emitter-extra/dist/commonjs.modern');\nconst assign = require('lodash/assign');\nconst forEach = require('lodash/forEach');\nconst isObject = require('lodash/isObject');\nconst debounce = require('lodash/debounce');\nconst Deferred = require('../lib/deferred');\nconst uuid = require('node-uuid');\nconst debug = require('debug')('line:server:connection');\n\n\n/**\n * Server connection class. Constructor of this class is not publicly accessible.\n * When you listen `Server.Events.CONNECTION` or `Server.Events.HANDSHAKE`, an instance\n * of `ServerConnection` will be emitted.\n *\n * @class ServerConnection\n * @extends {EventEmitterExtra}\n * @private\n * @property {string} id Unique connection id\n */\nclass ServerConnection extends EventEmitterExtra {\n    constructor(socket, server) {\n        super();\n\n        this.id = uuid.v4();\n        debug(`Creating connection with id ${this.id} ...`);\n\n        this.socket = socket;\n        this.server = server;\n\n        this.deferreds_ = {};\n        this.state = ServerConnection.States.OPEN;\n        this.handshakeResolved_ = false;\n\n        this.socket.on('message', this.onMessage_.bind(this));\n        this.socket.on('error', this.onError_.bind(this));\n        this.socket.on('close', this.onClose_.bind(this));\n\n        this.autoPing_ = server.options.pingInterval > 0 ?\n            debounce(() => {\n                if (this.state != ServerConnection.States.OPEN) {\n                    debug(`Not auto-pinging, connection state (${this.state}) is not open`);\n                    return;\n                }\n\n                this\n                    .ping()\n                    .then(() => {\n                        debug(`Auto-ping successful`);\n\n                        if (server.options.pingInterval > 0 && this.state == ServerConnection.States.OPEN) {\n                            this.autoPing_();\n                        }\n                    })\n                    .catch((err) => {\n                        debug(`Auto-ping failed: ${err.toString()}`);\n                    });\n            }, server.options.pingInterval) :\n            () => {};\n    }\n\n\n    onMessage_(data, flags) {\n        const message = Message.parse(data);\n        debug(`Native \"message\" event recieved: ${data}`);\n\n        this.autoPing_();\n\n        // Emit original _message event with raw data\n        this.emit(ServerConnection.Events.MESSAGE, data);\n\n        // Message without response (no id fields)\n        if (!message.id && Message.ReservedNames.indexOf(message.name) == -1) {\n            return this.emit(message.name, message);\n        }\n\n        // Handshake\n        if (message.name == Message.Names.HANDSHAKE) {\n            return this.onHandshake_(message);\n        }\n\n        // Ping\n        if (message.name == Message.Names.PING) {\n            return this.onPing_(message);\n        }\n\n        // Message response\n        if (message.name == Message.Names.RESPONSE && this.deferreds_[message.id]) {\n            return this.onResponse_(message);\n        }\n\n        // Message with response\n        message.once('resolved', payload => {\n            debug(`Message #${message.id} is resolved, sending response...`);\n            this.send_(message.createResponse(null, payload));\n            message.dispose();\n        });\n\n        message.once('rejected', err => {\n            debug(`Message #${message.id} is rejected, sending response...`);\n            if (isObject(err) && err instanceof Error)\n               err = assign({message: err.message, name: err.name}, err);\n            this.send_(message.createResponse(err));\n            message.dispose();\n        });\n\n        this.emit(message.name, message);\n    }\n\n\n    onHandshake_(message) {\n        debug(`Handshake message recieved: ${message}`);\n\n        message.once('resolved', payload => {\n            debug(`Handshake is resolved, sending response...`);\n            this.handshakeResolved_ = true;\n\n            const responsePayload = {\n                handshakePayload: payload,\n                id: this.id,\n                timeout: this.server.options.timeout,\n                maxReconnectDelay: this.server.options.maxReconnectDelay,\n                initialReconnectDelay: this.server.options.initialReconnectDelay,\n                reconnectIncrementFactor: this.server.options.reconnectIncrementFactor,\n                pingInterval: this.server.options.pingInterval\n            };\n\n            this\n                .send_(message.createResponse(null, responsePayload))\n                .then(() => {\n                    debug(`Handshake resolving response is sent, emitting Handshake OK...`);\n                    this.server.rooms.root.add(this);\n                    this.emit(ServerConnection.Events.HANDSHAKE_OK);\n                })\n                .catch(err => {\n                    debug(`Handshake resolving response could not sent, manually calling \"onClose_\"...`);\n                    console.log(`Handshake resolve response failed to send for ${this.id}.`);\n                    this.onClose_(500, err);\n                })\n                .then(() => {\n                    message.dispose();\n                });\n        });\n\n        message.once('rejected', err => {\n            debug(`Handshake is rejected, sending response...`);\n            if (isObject(err) && err instanceof Error)\n               err = assign({message: err.message, name: 'Error'}, err);\n\n            this\n                .send_(message.createResponse(err))\n                .catch(err_ => {\n                    debug(`Handshake rejecting response could not sent, manually calling \"onClose_\"...`);\n                    console.log(`Handshake reject response failed to send for ${this.id}.`);\n                })\n                .then(() => {\n                    this.onClose_(500, err);\n                    message.dispose();\n                });\n        });\n\n        // Sorry for party rocking\n        debug(`Emitting server's \"handshake\" event...`);\n        const handshakeResponse = this.server.emit('handshake', this, message);\n\n        if (!handshakeResponse) {\n            debug(`There is no handshake listener, resolving the handshake by default...`);\n            message.resolve();\n        }\n    }\n\n\n    onResponse_(message) {\n        const deferred = this.deferreds_[message.id];\n\n        if (message.err) {\n            debug(`Response (rejecting) recieved: ${message}`);\n            const err = assign(new Error(), message.err);\n            deferred.reject(err);\n        } else {\n            debug(`Response (resolving) recieved: ${message}`);\n            deferred.resolve(message.payload);\n        }\n\n        delete this.deferreds_[message.id];\n    }\n\n\n    onPing_(message) {\n        debug(`Ping request recieved, responding with \"pong\"...`);\n        this\n            .send_(message.createResponse(null, 'pong'))\n            .catch(err => {\n                debug(`Could not send ping response: ${err}`);\n                console.log('Ping responce failed to send', err);\n            });\n    }\n\n\n    onError_(err) {\n        debug(`Native \"error\" event recieved, emitting line's \"error\" event: ${err}`);\n        this.emit(ServerConnection.Events.ERROR, err);\n        debug(`And manually calling \"onClose_\"...`);\n        this.onClose_(500, err);\n    }\n\n\n    onClose_(code, message) {\n        debug(`Native \"close\" event recieved with code ${code}: ${message}`);\n\n        if (this.state == ServerConnection.States.CLOSE) {\n            debug(`Connection's state is already closed, ignoring...`);\n            return;\n        }\n\n        debug(`Removing connection from all rooms, rejecting all waiting messages...`);\n        this.server.rooms.removeFromAll(this);\n        this.server.rooms.root.remove(this);\n\n        forEach(this.deferreds_, (deferred) => {\n            deferred.reject(new Error('Socket connection closed!'));\n        });\n        this.deferreds_ = {};\n\n        debug(`Emitting line's \"close\" event...`);\n        this.state = ServerConnection.States.CLOSE;\n        this.emit(ServerConnection.Events.CLOSE, code, message);\n    }\n\n\n    /**\n     * Change connection's id, it's random by default. This method is helpful if you already have\n     * custom identification for your clients. You must do this before handshake resolved. If\n     * handshake is already resolved or there is conflict, this method will throw error.\n     *\n     * @param {string} newId New connection id\n     * @memberOf ServerConnection\n     */\n    setId(newId) {\n        if (this.handshakeResolved_)\n            throw new Error('Handshake already resolved, you cannot change connection id anymore');\n\n        if (this.server.getConnectionById(newId))\n            throw new Error(`Conflict! There is already connection with id newId`);\n\n        this.id = newId;\n    }\n\n\n    /**\n     * Joins the connection into provided room. If there is no room, it will be created automatically.\n     *\n     * @param {string} roomName\n     * @memberOf ServerConnection\n     */\n    joinRoom(roomName) {\n        this.server.rooms.add(roomName, this);\n    }\n\n\n    /**\n     * Leaves the connection from provided room.\n     *\n     * @param {string} roomName\n     * @memberOf ServerConnection\n     */\n    leaveRoom(roomName) {\n        this.server.rooms.remove(roomName, this);\n    }\n\n\n\n    /**\n     * Gets the joined room names.\n     *\n     * @returns {Array<string>}\n     * @memberOf ServerConnection\n     */\n    getRooms() {\n        return this.server.rooms.getRoomsOf(this);\n    }\n\n\n    /**\n     * Sends a message to client and waits for its response.\n     *\n     * @param {string} eventName\n     * @param {any=} payload\n     * @returns {Promise<any>}\n     * @memberOf ServerConnection\n     * @example\n     * connection\n     *   .send('hello', {optional: 'payload'})\n     *   .then(responsePayload => {\n     *     // Message is resolved by client\n     *   })\n     *   .catch(err => {\n     *     // Could not send message\n     *     // or\n     *     // Client rejected the message!\n     *   });\n     */\n    send(eventName, payload) {\n        const message = new Message({name: eventName, payload});\n        message.setId();\n\n        return this\n            .send_(message)\n            .then(_ => {\n                const deferred = this.deferreds_[message.id] = new Deferred({\n                    onExpire: () => {\n                        debug(`Message #${message.id} timeout!`);\n                        delete this.deferreds_[message.id];\n                    },\n                    timeout: this.server.options.timeout\n                });\n\n                return deferred;\n            });\n    }\n\n\n    /**\n     * Sends a message to client without waiting response.\n     *\n     * @param {string} eventName\n     * @param {any=} payload\n     * @returns {Promise}\n     * @memberOf ServerConnection\n     * @example\n     * connection\n     *   .sendWithoutResponse('hello', {optional: 'payload'})\n     *   .then(() => {\n     *     // Message sent successfully\n     *   })\n     *   .catch(err => {\n     *     // Message could not be sent to client\n     *   })\n     */\n    sendWithoutResponse(eventName, payload) {\n        const message = new Message({name: eventName, payload});\n        return this.send_(message);\n    }\n\n\n    send_(message) {\n        return new Promise((resolve, reject) => {\n            debug(`Sending message: ${message}`);\n            this.socket.send(message.toString(), err => {\n                if (err) return reject(err);\n                resolve();\n            });\n        });\n    }\n\n\n    /**\n     * Pings the client. If there is no respose, closes the connection.\n     *\n     * @returns {Promise}\n     * @memberOf ServerConnection\n     */\n    ping() {\n        debug(`Pinging...`);\n        return this\n            .send(Message.Names.PING)\n            .catch(err => {\n                debug(`Ping failed: ${err.toString()}`);\n                this.close(410, new Error('Ping failed, dead connection'));\n                throw err;\n            });\n    }\n\n\n    /**\n     * Gracefully closes the client connection.\n     *\n     * @param {number} code\n     * @param {any} data\n     * @returns {Promise}\n     */\n    close(code, data) {\n        debug(`Closing the connection...`);\n        return new Promise(resolve => {\n            this.socket.close(code, data);\n            resolve();\n        });\n    }\n}\n\n\n/**\n * @static\n * @readonly\n * @enum {string}\n */\nServerConnection.States = {\n    /**\n     * `open` Connection is alive and open.\n     */\n    OPEN: 'open',\n    /**\n     * `close` There is no alive connection.\n     */\n    CLOSE: 'close'\n};\n\n\n/**\n * @static\n * @readonly\n * @enum {string}\n */\nServerConnection.Events = {\n    /**\n     * `_message`\n     */\n    MESSAGE: '_message',\n    /**\n     * @ignore\n     */\n    HANDSHAKE_OK: '_handshakeOk', // Private\n    /**\n     * `_error`\n     */\n    ERROR: '_error',\n    /**\n     * `_close`\n     */\n    CLOSE: '_close'\n};\n\n\nmodule.exports = ServerConnection;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/connection.js","const filter = require('lodash/filter');\nconst forEach = require('lodash/forEach');\nconst map = require('lodash/map');\nconst Room = require('./room');\n\n\nclass Rooms {\n    constructor() {\n        this.rooms = {};\n        this.root = new Room();\n    }\n\n    add(roomName, connection) {\n        if(!this.rooms[roomName])\n            this.rooms[roomName] = new Room(roomName);\n\n        this.rooms[roomName].add(connection);\n    }\n\n    remove(roomName, connection) {\n        if(!this.rooms[roomName])\n            return;\n\n        this.rooms[roomName].remove(connection);\n\n        if (!this.rooms[roomName].getConnectionsCount())\n            delete this.rooms[roomName];\n    }\n\n    getRoomsOf(connection) {\n        return map(filter(this.rooms, room => room.getConnectionById(connection.id)), 'name');\n    }\n\n    getRoom(room) {\n        return this.rooms[room];\n    }\n\n    removeFromAll(connection) {\n        const rooms = this.getRoomsOf(connection);\n        forEach(rooms, roomName => this.rooms[roomName].remove(connection));\n    }\n}\n\n\nmodule.exports = Rooms;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/rooms.js","module.exports = require(\"uws\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"uws\"\n// module id = 9\n// module chunks = 0","class Deferred {\n    constructor({\n        handler = () => {},\n        onExpire = () => {},\n        timeout = 0\n    } = {}) {\n        this.resolve_ = null;\n        this.reject_ = null;\n\n        this.timeout_ = null;\n        this.onExpire_ = onExpire;\n        this.isFinished_ = false;\n\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve_ = resolve;\n            this.reject_ = reject;\n\n            try {\n                handler(this);\n            } catch (err) {\n                this.reject(err);\n            }\n        });\n\n        if (timeout > 0) {\n            this.timeout_ = setTimeout(this.expire.bind(this), timeout);\n        }\n    }\n\n\n    resolve(data) {\n        if (this.isFinished_) return;\n\n        this.isFinished_ = true;\n        this.clearTimeout_();\n        this.resolve_(data);\n    }\n\n\n    reject(err) {\n        if (this.isFinished_) return;\n\n        this.isFinished_ = true;\n        this.clearTimeout_();\n        this.reject_(err);\n    }\n\n\n    expire() {\n        this.isFinished_ = true;\n        this.clearTimeout_();\n        this.onExpire_();\n        this.reject_(new Error('Timeout exceed'));\n    }\n\n\n    then(...args) {\n        return this.promise.then.apply(this.promise, args);\n    }\n\n\n    catch(...args) {\n        return this.promise.catch.apply(this.promise, args);\n    }\n\n\n    clearTimeout_() {\n        if (this.timeout_) {\n            clearTimeout(this.timeout_);\n            this.timeout_ = null;\n        }\n    }\n}\n\n\nmodule.exports = Deferred;\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/deferred.js","const forEach = require('lodash/forEach');\nconst clone = require('lodash/clone');\nconst Message = require('../lib/message');\n\n\n/**\n * Line room class.\n *\n * @private\n * @class ServerRoom\n * @param {string} name Room name\n * @property {string} name\n */\nclass ServerRoom {\n    constructor(name, connections = {}) {\n        this.name = name;\n        this.connections = connections;\n    }\n\n\n    /**\n     * Adds a connection into room.\n     * @param {ServerConnection} connection\n     */\n    add(connection) {\n        this.connections[connection.id] = connection;\n    }\n\n\n    /**\n     * Removes a connection from room.\n     * @param {ServerConnection} connection\n     */\n    remove(connection) {\n        delete this.connections[connection.id];\n    }\n\n\n    /**\n     * Gets a connection by id.\n     * @param {string} connectionId\n     * @returns {?ServerConnection}\n     */\n    getConnectionById(connectionId) {\n        return this.connections[connectionId];\n    }\n\n\n    /**\n     * Gets all connections in the room. Returns a object where keys are\n     * connection id and values are ServerConnection.\n     * @returns {{string: ServerConnection}}\n     */\n    getConnections() {\n        return clone(this.connections);\n    }\n\n\n    /**\n     * Returns the total connection count in room.\n     * @returns {number}\n     */\n    getConnectionsCount() {\n        return Object.keys(this.connections).length;\n    }\n\n    broadcast_(message) {\n        forEach(this.connections, connection => {\n            connection.send_(message)\n        });\n    }\n\n\n    /**\n     * Broadcast a message to all connections in the room.\n     * @param {string} eventName\n     * @param {any=} payload\n     */\n    broadcast(eventName, payload) {\n        const message = new Message({name: eventName, payload});\n        forEach(this.connections, (connection, index) => {\n            connection.send_(message)\n        });\n    }\n}\n\n\nmodule.exports = ServerRoom;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/room.js","module.exports = require(\"lodash/clone\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/clone\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"lodash/debounce\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/debounce\"\n// module id = 13\n// module chunks = 0","module.exports = require(\"lodash/filter\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/filter\"\n// module id = 14\n// module chunks = 0","module.exports = require(\"lodash/isFunction\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/isFunction\"\n// module id = 15\n// module chunks = 0","module.exports = require(\"lodash/isUndefined\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/isUndefined\"\n// module id = 16\n// module chunks = 0","module.exports = require(\"lodash/map\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/map\"\n// module id = 17\n// module chunks = 0","module.exports = require(\"lodash/values\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash/values\"\n// module id = 18\n// module chunks = 0","module.exports = require(\"node-uuid\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"node-uuid\"\n// module id = 19\n// module chunks = 0","const WebSocketServer = require('uws').Server;\nconst Connection = require('./connection');\nconst Rooms = require('./rooms');\nconst EventEmitterExtra = require('event-emitter-extra/dist/commonjs.modern');\nconst debug = require('debug')('line:server');\n\n\n/**\n * Line Server Class\n * Documentation is here deneme\n *\n * @class Server\n * @extends {EventEmitterExtra}\n * @param {Object=} options Options object.\n * @param {string=} options.host Server host name. Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n * @param {number=} options.port Server port. Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n * @param {http.Server=} options.server Server object to be attached. If provided, `host` and `port` will ignored. Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n * @param {Function=} options.handleProtocols Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#optionshandleprotocols).\n * @param {string=} options.path Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n * @param {boolean=} options.noServer Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n * @param {boolean=} options.clientTracking Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#new-websocketserveroptions-callback).\n * @param {Object=} options.perMessageDeflate Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#optionspermessagedeflate).\n * @param {number=} options.timeout Timeout duration (in ms) for message responses. Default: 30 seconds\n * @param {number=} options.maxReconnectDelay Maximum reconnection delay (in seconds) for clients. Default: 60 seconds\n * @param {number=} options.initialReconnectDelay Intial reconnection delay (in seconds) for clients. Defualt: 1 seconds\n * @param {number=} options.reconnectIncrementFactor Reconnection incremental factor for clients. Default: 2\n * @param {number=} options.pingInterval Ping interval (in ms) for both server and client. Default: 60 seconds.\n * @example\n * const Server = require('line-socket/server');\n * const server = new Server({\n *   port: 8080\n * });\n */\nclass Server extends EventEmitterExtra {\n    constructor(options = {}) {\n        super();\n\n        this.rooms = new Rooms();\n\n        this.options = Object.assign({\n            timeout: 30000,\n            maxReconnectDelay: 60,\n            initialReconnectDelay: 1,\n            reconnectIncrementFactor: 2,\n            pingInterval: 60000\n        }, options);\n\n        debug(`Initalizing with options: ${JSON.stringify(this.options)}`);\n    }\n\n    /**\n     * Starts the server.\n     *\n     * @returns {Promise}\n     * @memberOf Server\n     * @example\n     * server\n     *   .start()\n     *   .then(() => {\n     *     console.log('Server started');\n     *   })\n     *   .catch((err) => {\n     *     console.log('Server could not started', err);\n     *   });\n     */\n    start() {\n        if (!this.options.port) {\n            debug(`Starting without port...`);\n            this.server = new WebSocketServer(this.options);\n            this.bindEvents();\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, reject) => {\n            debug(`Starting with port \"${this.options.port}\" ...`);\n\n            this.server = new WebSocketServer(this.options, err => {\n                if (err) {\n                    debug(`Could not start: ${err}`);\n                    return reject(err);\n                }\n\n                this.bindEvents();\n                resolve();\n            });\n        })\n    }\n\n\n    /**\n     * Stops the server.\n     *\n     * @returns {Promise}\n     * @memberOf Server\n     * @example\n     * server\n     *   .stop()\n     *   .then(() => {\n     *     console.log('Server stopped');\n     *   })\n     *   .catch((err) => {\n     *     console.log('Server could not stopped', err);\n     *   });\n     */\n    stop() {\n        if (!this.server) {\n            debug(`Could not stop server. Server is probably not started, or already stopped.`);\n            const err = new Error('Could not stop server. Server is probably not started, or already stopped.');\n            return Promise.reject(err);\n        }\n\n        return new Promise(resolve => {\n            debug(`Closing and disposing the server...`);\n            this.server.close();\n            this.server = null;\n            resolve();\n        });\n    }\n\n\n    bindEvents() {\n        debug(`Binding server events...`);\n\n        this.server.on('connection', this.onConnection.bind(this));\n        this.server.on('headers', this.onHeaders.bind(this));\n        this.server.on('error', this.onError.bind(this));\n    }\n\n\n    onConnection(socket) {\n        debug(`Native \"connection\" event recieved, creating line connection...`);\n        const connection = new Connection(socket, this);\n\n        connection.on(Connection.Events.HANDSHAKE_OK, () => {\n            debug(`Handshake OK, emitting line's \"connection\" event...`);\n            this.emit(Server.Events.CONNECTION, connection);\n        });\n    }\n\n\n    onHeaders(headers) {\n        debug(`Native \"headers\" event recieved, emitting line's \"headers\" event... (${headers})`);\n        this.emit(Server.Events.HEADERS, headers);\n    }\n\n\n    onError(err) {\n        debug(`Native \"error\" event recieved, emitting line's \"error\" event... (${err})`);\n        this.emit(Server.Events.ERROR, err);\n    }\n\n\n    /**\n     * Returns a object where keys are connection id and values are ServerConnection.\n     *\n     * @returns {{string: ServerConnection}}\n     * @memberOf Server\n     */\n    getConnections() {\n        return this.rooms.root.getConnections();\n    }\n\n\n    /**\n     * Gets a connection by id\n     *\n     * @param {string} id Unique connection id, which can be accessed at `connection.id`\n     * @returns {?ServerConnection}\n     * @memberOf Server\n     * @example\n     * const connection = server.getConnectionById('someId');\n     *\n     * if (connection)\n     *   connection.send('hello', {world: ''});\n     */\n    getConnectionById(id) {\n        return this.rooms.root.getConnectionById(id);\n    }\n\n\n    /**\n     * Broadcasts a message to all the connected clients.\n     *\n     * @param {string} eventName Event name\n     * @param {any=} payload Optional message payload.\n     * @memberOf Server\n     * @example\n     * server.broadcast('hello', {world: ''});\n     */\n    broadcast(eventName, payload) {\n        debug(`Broadcasting \"${eventName}\" event...`);\n        this.rooms.root.broadcast(eventName, payload);\n    }\n\n\n    /**\n     * Gets a room by name.\n     * @param {string} room Room name\n     * @returns {?ServerRoom}\n     */\n    getRoom(room) {\n        return this.rooms.getRoom(room);\n    }\n\n    /**\n     * Gets all the rooms of a connection.\n     * @param {ServerConnection} connection\n     * @returns {Array.<string>} Array of room names.\n     */\n    getRoomsOf(connection) {\n        return this.rooms.getRoomsOf(connection);\n    }\n\n\n    /**\n     * Remove a connection from all the rooms.\n     * @param {ServerConnection} connection\n     */\n    removeFromAllRooms(connection) {\n        this.rooms.removeFromAll(connection);\n    }\n}\n\n\n/**\n * @static\n * @readonly\n * @enum {string}\n * @example\n * server.on('connection', (connection) => {\n *   connection.send('hello');\n *   ...\n * });\n *\n * // or\n *\n * server.on(Server.Events.CONNECTION, (connection) => {\n *   connection.send('hello');\n *   ...\n * });\n *\n * // If you want to authorize your client\n * server.on('handshake', (connection, handshake) => {\n *   if (handshake.payload.token == 'test')\n *     handshake.resolve();\n *   else\n *     handshake.reject(new Error('Invalid token'));\n * });\n */\nServer.Events = {\n    /**\n     * `'connection'` This event will fire on a client connects **after successful handshake**.\n     *\n     * ```\n     * function (connection) {}\n     * ```\n     *\n     * where `connection` is a `ServerConnection` instance.\n     */\n    CONNECTION: 'connection',\n    /**\n     * `'handshake'` When a client connection is established, this event will be fired before\n     * `connection` event. If you want to authorize your clients, you must listen this event and\n     * call `handshake.resolve(payload)` or `handshake.reject(err)` accordingly. If you do not consume\n     * this events, all the client connections will be accepted.\n     *\n     * ```\n     * function (connection, handshake) {}\n     * ```\n     *\n     * where `connection` is `ServerConnection` and `handshake` is a `Message` instance.\n     */\n    HANDSHAKE: 'handshake',\n    /**\n     * `'headers'` Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#event-headers)\n     */\n    HEADERS: 'headers',\n    /**\n     * `'error'` Inherited from uws, [see docs](https://github.com/websockets/ws/blob/master/doc/ws.md#event-error)\n     */\n    ERROR: 'error'\n};\n\n\nmodule.exports = Server;\n\n\n\n// WEBPACK FOOTER //\n// ./src/server/server.js"],"sourceRoot":""}